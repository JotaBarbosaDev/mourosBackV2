generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sexo {
  MASCULINO
  FEMININO
  OUTRO
}
enum TipoSangue {
  ND
  A_POSITIVO
  A_NEGATIVO
  B_POSITIVO
  B_NEGATIVO
  AB_POSITIVO
  AB_NEGATIVO
  O_POSITIVO
  O_NEGATIVO
}

enum StatusSocio {
  ATIVO
  INATIVO
  SUSPENSO
  HONORARIO
}

enum DescriptionReserva {
  OLD_PARTNER
  NO_PAY
  EXPELLED
  EVENT
  HONOR
  CUSTOM
}

model Socio {
  id Int @id @default(autoincrement())
  nSocio Int @unique
  nomeCompleto String
  sexo Sexo 
  email String @unique
  password String
  telemovel String
  tipoSangue TipoSangue @default(ND)
  rua String
  nPorta String
  codigoPostal String
  freguesia String
  concelho String
  distrito String
  dataEntrada DateTime @default(now())
  dataNascimento DateTime?
  responsavel String
  updatedAt DateTime @updatedAt
  avatar String @default("public/images/avatares/default.jpeg")
  kitSocio Boolean @default(false)
  kitDate DateTime?
  grupoWhatsApp Boolean @default(false)
  grupoWhatsAppDate DateTime?
  status StatusSocio @default(ATIVO)

  motas Mota[]
  quotas Quota[]
}

model Mota {
  id Int @id @default(autoincrement())
  marca String
  modelo String
  celindrada Int
  matricula String @unique
  ano DateTime
  avatar String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  socios Socio[]
}

model Quota{
  id Int @id @default(autoincrement())
  nSocio Int
  ano Int
  data DateTime @default(now())
  valor Int 
  payedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socio Socio @relation(fields: [id], references: [id])
}

model Reserva {
  id Int @id @default(autoincrement())
  nSocio Int @unique
  descricao DescriptionReserva
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  }
